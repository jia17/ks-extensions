version: '3'

services:
  # RAG 后端服务
  rag-backend:
    build:
      context: ../../  # 指向 llm-milvus-api 根目录
      dockerfile: Dockerfile  # 使用根目录的 Dockerfile（完整实现）
    container_name: rag-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - KIMI_API_KEY=${KIMI_API_KEY}
      - SILICONFLOW_API_KEY=${SILICONFLOW_API_KEY}
      - MILVUS_HOST=milvus
      - MILVUS_PORT=19530
      - LOG_LEVEL=INFO
    volumes:
      - ../backend/data:/app/data
      - ../backend/logs:/app/logs
      - ../backend/config:/app/config
    networks:
      - rag-network
    depends_on:
      - milvus
      - etcd
      - minio
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # KubeSphere 扩展前端开发服务
  extension-dev:
    image: node:14
    container_name: ks-extension-dev
    working_dir: /app
    command: >
      bash -c "npm install && npm run dev"
    ports:
      - "8080:8080"
    environment:
      - API_BASE_URL=http://rag-backend:8000
      - NODE_ENV=development
    volumes:
      - ../extensions/rag-assistant:/app
    networks:
      - rag-network
    depends_on:
      - rag-backend

  # Milvus 向量数据库
  milvus:
    image: milvusdb/milvus:v2.2.11
    container_name: milvus
    restart: unless-stopped
    environment:
      - ETCD_ENDPOINTS=etcd:2379
      - MINIO_ADDRESS=minio:9000
    volumes:
      - milvus-data:/var/lib/milvus/data
      - milvus-rdb:/var/lib/milvus/rdb_data
      - milvus-meta:/var/lib/milvus/rdb_data_meta_kv
    ports:
      - "19530:19530"
      - "9091:9091"
    networks:
      - rag-network
    depends_on:
      - etcd
      - minio
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # etcd 服务
  etcd:
    image: quay.io/coreos/etcd:v3.5.5
    container_name: etcd
    restart: unless-stopped
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - etcd-data:/etcd
    command:
      - etcd
      - --advertise-client-urls=http://127.0.0.1:2379
      - --listen-client-urls=http://0.0.0.0:2379
      - --data-dir=/etcd
    ports:
      - "2379:2379"
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO 对象存储
  minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    container_name: minio
    restart: unless-stopped
    environment:
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    volumes:
      - minio-data:/data
    command: minio server /data
    ports:
      - "9000:9000"
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx 反向代理（可选，用于统一访问）
  nginx:
    image: nginx:1.21
    container_name: rag-nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx-integrated.conf:/etc/nginx/conf.d/default.conf
    networks:
      - rag-network
    depends_on:
      - rag-backend
      - extension-dev

networks:
  rag-network:
    driver: bridge

volumes:
  milvus-data:
  milvus-rdb:
  milvus-meta:
  etcd-data:
  minio-data:
